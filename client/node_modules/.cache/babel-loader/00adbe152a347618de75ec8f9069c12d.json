{"ast":null,"code":"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport createRootReducer from \"./reducers/index\";\nimport { isValidToken } from \"./reducers/auth\"; // import rootSaga from \"./sagas/index\";\n\nconst initState = {\n  products: {\n    allProducts: [],\n    loading: false,\n    error: \"\",\n    currentProduct: {} // search: \"\",\n\n  },\n  users: {\n    allUsers: [],\n    loading: false,\n    error: \"\"\n  },\n  authentication: {\n    currentUser: localStorage.getItem(\"USER-TOKEN\") ? isValidToken(localStorage.getItem(\"USER-TOKEN\")) : null,\n    token: localStorage.getItem(\"USER-TOKEN\") ? localStorage.getItem(\"USER-TOKEN\") : null,\n    error: \"\",\n    loading: false,\n    isAuthenticated: false\n  },\n  cart: {\n    inCart: []\n  },\n  alert: {\n    type: \"\",\n    message: \"\"\n  },\n  orders: {\n    orders: [],\n    loading: false,\n    error: \"\"\n  }\n};\nconst persistConfig = {\n  key: \"persistedStore\",\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, createRootReducer());\nexport default function makeStore(initialState = initState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [thunk, sagaMiddleware];\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV === \"development\") {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    }\n  }\n\n  const store = createStore(persistedReducer, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n  let persistor = persistStore(store); // sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      const nextReducer = require(\"./reducers\").default;\n\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"sources":["/Users/Josephine/Documents/Integrify-full-stack/full-stack-4-typescript-men-boilerplate/client/src/redux/store.tsx"],"names":["applyMiddleware","createStore","compose","persistStore","persistReducer","storage","createSagaMiddleware","thunk","createRootReducer","isValidToken","initState","products","allProducts","loading","error","currentProduct","users","allUsers","authentication","currentUser","localStorage","getItem","token","isAuthenticated","cart","inCart","alert","type","message","orders","persistConfig","key","persistedReducer","makeStore","initialState","sagaMiddleware","middlewares","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","persistor","module","hot","accept","nextReducer","require","default","replaceReducer"],"mappings":"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","sourcesContent":["import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\n\nimport createRootReducer from \"./reducers/index\";\nimport { AppState } from \"../types\";\nimport { isValidToken } from \"./reducers/auth\";\n// import rootSaga from \"./sagas/index\";\n\nconst initState: AppState = {\n  products: {\n    allProducts: [],\n    loading: false,\n    error: \"\",\n    currentProduct: {},\n    // search: \"\",\n  },\n  users: {\n    allUsers: [],\n    loading: false,\n    error: \"\",\n  },\n  authentication: {\n    currentUser: localStorage.getItem(\"USER-TOKEN\")\n      ? isValidToken(localStorage.getItem(\"USER-TOKEN\"))\n      : null,\n    token: localStorage.getItem(\"USER-TOKEN\")\n      ? localStorage.getItem(\"USER-TOKEN\")\n      : null,\n    error: \"\",\n    loading: false,\n    isAuthenticated: false,\n  },\n  cart: {\n    inCart: [],\n  },\n  alert: { type: \"\", message: \"\" },\n  orders: {\n    orders: [],\n    loading: false,\n    error: \"\",\n  },\n};\nconst persistConfig = {\n  key: \"persistedStore\",\n  storage,\n};\nconst persistedReducer = persistReducer(persistConfig, createRootReducer());\n\nexport default function makeStore(initialState = initState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [thunk, sagaMiddleware];\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV === \"development\") {\n    if ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    }\n  }\n\n  const store = createStore(\n    persistedReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  );\n  let persistor = persistStore(store);\n  // sagaMiddleware.run(rootSaga);\n\n  if ((module as any).hot) {\n    (module as any).hot.accept(\"./reducers\", () => {\n      const nextReducer = require(\"./reducers\").default;\n      store.replaceReducer(nextReducer);\n    });\n  }\n  return { store, persistor };\n}\n"]},"metadata":{},"sourceType":"module"}