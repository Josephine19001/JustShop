{"ast":null,"code":"var _jsxFileName = \"/Users/Josephine/Documents/Integrify-full-stack/full-stack-4-typescript-men-boilerplate/client/src/components/PrivateRoute.tsx\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nexport const AdminRoute = ({\n  children,\n  path,\n  ...rest\n}) => {\n  const {\n    currentUser,\n    isAuthenticated\n  } = useSelector(state => state.authentication);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    exact: true,\n    render: ({\n      location\n    }) => currentUser && isAuthenticated ? children : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: \"/signin\",\n        state: {\n          from: location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }));\n};\nexport const UserRoute = ({\n  component,\n  path,\n  ...rest\n}) => {\n  const {\n    currentUser\n  } = useSelector(state => state.authentication);\n  return currentUser !== null ? /*#__PURE__*/React.createElement(Route, Object.assign({\n    exact: true,\n    path: path,\n    component: component\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/signin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/Josephine/Documents/Integrify-full-stack/full-stack-4-typescript-men-boilerplate/client/src/components/PrivateRoute.tsx"],"names":["React","Route","Redirect","useSelector","AdminRoute","children","path","rest","currentUser","isAuthenticated","state","authentication","location","pathname","from","UserRoute","component"],"mappings":";AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAIA,OAAO,MAAMC,UAAgC,GAAG,CAAC;AAC/CC,EAAAA,QAD+C;AAE/CC,EAAAA,IAF+C;AAG/C,KAAGC;AAH4C,CAAD,KAI1C;AACJ,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAmCN,WAAW,CACjDO,KAAD,IAAqBA,KAAK,CAACC,cADuB,CAApD;AAIA,sBACE,oBAAC,KAAD,oBACMJ,IADN;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,EAAE,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACNJ,WAAW,IAAIC,eAAf,GACEJ,QADF,gBAGE,oBAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFQ,QAAAA,QAAQ,EAAE,SADR;AAEFH,QAAAA,KAAK,EAAE;AAAEI,UAAAA,IAAI,EAAEF;AAAR;AAFL,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAkBD,CA3BM;AA6BP,OAAO,MAAMG,SAA8C,GAAG,CAAC;AAC7DC,EAAAA,SAD6D;AAE7DV,EAAAA,IAF6D;AAG7D,KAAGC;AAH0D,CAAD,KAIxD;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAkBL,WAAW,CAChCO,KAAD,IAAqBA,KAAK,CAACC,cADM,CAAnC;AAIA,SAAOH,WAAW,KAAK,IAAhB,gBACL,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAEF,IAAnB;AAAyB,IAAA,SAAS,EAAEU;AAApC,KAAmDT,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADK,gBAGL,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKD,CAdM","sourcesContent":["import React, { FC } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { AppState } from \"../types\";\n\nexport const AdminRoute: FC<{ path: string }> = ({\n  children,\n  path,\n  ...rest\n}) => {\n  const { currentUser, isAuthenticated } = useSelector(\n    (state: AppState) => state.authentication\n  );\n\n  return (\n    <Route\n      {...rest}\n      exact\n      render={({ location }) =>\n        currentUser && isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/signin\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport const UserRoute: FC<{ component: FC; path: string }> = ({\n  component,\n  path,\n  ...rest\n}) => {\n  const { currentUser } = useSelector(\n    (state: AppState) => state.authentication\n  );\n\n  return currentUser !== null ? (\n    <Route exact path={path} component={component} {...rest} />\n  ) : (\n    <Redirect to={\"/signin\"} />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}